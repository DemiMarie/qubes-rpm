From ebedc717a5f0e8405d95d4bf96f76465f7d0cf90 Mon Sep 17 00:00:00 2001
From: Demi Marie Obenour <demi@invisiblethingslab.com>
Date: Tue, 4 May 2021 15:45:21 -0400
Subject: [PATCH 15/22] Rip out DSA support

QubesOS dom0 does not need it, ever.  We only use RSA.
---
 rpmio/digest_openssl.c | 326 -----------------------------------------
 rpmio/rpmpgp.c         |   3 -
 2 files changed, 329 deletions(-)

diff --git a/rpmio/digest_openssl.c b/rpmio/digest_openssl.c
index 18e52a7..255a9ef 100644
--- a/rpmio/digest_openssl.c
+++ b/rpmio/digest_openssl.c
@@ -37,67 +37,6 @@ int RSA_set0_key(RSA *r, BIGNUM *n, BIGNUM *e, BIGNUM *d)
 }
 #endif /* HAVE_RSA_SET0_KEY */
 
-#ifndef HAVE_DSA_SET0_KEY
-int DSA_set0_key(DSA *d, BIGNUM *pub_key, BIGNUM *priv_key);
-
-int DSA_set0_key(DSA *d, BIGNUM *pub_key, BIGNUM *priv_key)
-{
-    if (!d) return 0;
-
-    if (pub_key) {
-        d->pub_key = pub_key;
-    }
-
-    if (priv_key) {
-        d->priv_key = priv_key;
-    }
-
-    return 1;
-}
-#endif /* HAVE_DSA_SET0_KEY */
-
-#ifndef HAVE_DSA_SET0_PQG
-int DSA_set0_pqg(DSA *d, BIGNUM *p, BIGNUM *q, BIGNUM *g);
-
-int DSA_set0_pqg(DSA *d, BIGNUM *p, BIGNUM *q, BIGNUM *g)
-{
-    if (!d) return 0;
-
-    if (p) {
-        d->p = p;
-    }
-
-    if (q) {
-        d->q = q;
-    }
-
-    if (g) {
-        d->g = g;
-    }
-
-    return 1;
-}
-#endif /* HAVE_DSA_SET0_PQG */
-
-#ifndef HAVE_DSA_SIG_SET0
-int DSA_SIG_set0(DSA_SIG *sig, BIGNUM *r, BIGNUM *s);
-
-int DSA_SIG_set0(DSA_SIG *sig, BIGNUM *r, BIGNUM *s)
-{
-    if (!sig) return 0;
-
-    if (r) {
-        sig->r = r;
-    }
-
-    if (s) {
-        sig->s = s;
-    }
-
-    return 1;
-}
-#endif /* HAVE_DSA_SIG_SET0 */
-
 #ifndef HAVE_BN2BINPAD
 static int BN_bn2binpad(const BIGNUM *a, unsigned char *to, int tolen)
 {
@@ -518,260 +457,6 @@ done:
     return rc;
 }
 
-/****************************** DSA ***************************************/
-/* Key */
-
-struct pgpDigKeyDSA_s {
-    BIGNUM *p; /* Prime */
-    BIGNUM *q; /* Subprime */
-    BIGNUM *g; /* Base */
-    BIGNUM *y; /* Public Key */
-
-    DSA *dsa_key; /* Fully constructed key */
-};
-
-static int constructDSASigningKey(struct pgpDigKeyDSA_s *key)
-{
-    int rc;
-
-    if (key->dsa_key) {
-        /* We've already constructed it, so just reuse it */
-        return 1;
-    }
-
-    /* Create the DSA key */
-    DSA *dsa = DSA_new();
-    if (!dsa) return 0;
-
-    if (!DSA_set0_pqg(dsa, key->p, key->q, key->g)) {
-        rc = 0;
-        goto done;
-    }
-
-    if (!DSA_set0_key(dsa, key->y, NULL)) {
-        rc = 0;
-        goto done;
-    }
-
-    key->dsa_key = dsa;
-
-    rc = 1;
-done:
-    if (rc == 0) {
-        DSA_free(dsa);
-    }
-    return rc;
-}
-
-
-static int pgpSetKeyMpiDSA(pgpDigAlg pgpkey, int num, const uint8_t *p)
-{
-    BIGNUM *bn;
-    size_t mlen = pgpMpiLen(p) - 2;
-    struct pgpDigKeyDSA_s *key = pgpkey->data;
-
-    if (!key) {
-        key = pgpkey->data = xcalloc(1, sizeof(*key));
-    }
-
-    /* Create a BIGNUM from the key pointer.
-       Note: this assumes big-endian data as required
-       by the PGP multiprecision integer format
-       (RFC4880, Section 3.2) */
-    bn = BN_bin2bn(p+2, mlen, NULL);
-    if (!bn) return 1;
-
-    switch (num) {
-    case 0:
-        /* Prime */
-        if (key->p) {
-            /* This should only ever happen once per key */
-            return 1;
-        }
-        key->p = bn;
-        break;
-
-    case 1:
-        /* Subprime */
-        if (key->q) {
-            /* This should only ever happen once per key */
-            return 1;
-        }
-        key->q = bn;
-        break;
-    case 2:
-        /* Base */
-        if (key->g) {
-            /* This should only ever happen once per key */
-            return 1;
-        }
-        key->g = bn;
-        break;
-    case 3:
-        /* Public */
-        if (key->y) {
-            /* This should only ever happen once per key */
-            return 1;
-        }
-        key->y = bn;
-        break;
-    }
-
-    return 0;
-}
-
-static void pgpFreeKeyDSA(pgpDigAlg pgpkey)
-{
-    struct pgpDigKeyDSA_s *key = pgpkey->data;
-    if (key) {
-        if (key->dsa_key) {
-            DSA_free(key->dsa_key);
-        } else {
-            /* If sig->dsa_key was constructed,
-             * the memory management of these BNs
-             * are freed with it. */
-            BN_clear_free(key->p);
-            BN_clear_free(key->q);
-            BN_clear_free(key->g);
-            BN_clear_free(key->y);
-        }
-        free(key);
-    }
-}
-
-/* Signature */
-
-struct pgpDigSigDSA_s {
-    BIGNUM *r;
-    BIGNUM *s;
-
-    DSA_SIG *dsa_sig;
-};
-
-static int constructDSASignature(struct pgpDigSigDSA_s *sig)
-{
-    int rc;
-
-    if (sig->dsa_sig) {
-        /* We've already constructed it, so just reuse it */
-        return 1;
-    }
-
-    /* Create the DSA signature */
-    DSA_SIG *dsa_sig = DSA_SIG_new();
-    if (!dsa_sig) return 0;
-
-    if (!DSA_SIG_set0(dsa_sig, sig->r, sig->s)) {
-        rc = 0;
-        goto done;
-    }
-
-    sig->dsa_sig = dsa_sig;
-
-    rc = 1;
-done:
-    if (rc == 0) {
-        DSA_SIG_free(sig->dsa_sig);
-    }
-    return rc;
-}
-
-static int pgpSetSigMpiDSA(pgpDigAlg pgpsig, int num, const uint8_t *p)
-{
-    BIGNUM *bn = NULL;
-
-    int mlen = pgpMpiLen(p) - 2;
-    int rc = 1;
-
-    struct pgpDigSigDSA_s *sig = pgpsig->data;
-    if (!sig) {
-        sig = xcalloc(1, sizeof(*sig));
-    }
-
-    /* Create a BIGNUM from the signature pointer.
-       Note: this assumes big-endian data as required
-       by the PGP multiprecision integer format
-       (RFC4880, Section 3.2) */
-    bn = BN_bin2bn(p+2, mlen, NULL);
-    if (!bn) return 1;
-
-    switch (num) {
-    case 0:
-        if (sig->r) {
-            /* This should only ever happen once per signature */
-            BN_free(bn);
-            return 1;
-        }
-        sig->r = bn;
-        rc = 0;
-        break;
-    case 1:
-        if (sig->s) {
-            /* This should only ever happen once per signature */
-            BN_free(bn);
-            return 1;
-        }
-        sig->s = bn;
-        rc = 0;
-        break;
-    }
-
-    pgpsig->data = sig;
-
-    return rc;
-}
-
-static void pgpFreeSigDSA(pgpDigAlg pgpsig)
-{
-    struct pgpDigSigDSA_s *sig = pgpsig->data;
-    if (sig) {
-        if (sig->dsa_sig) {
-            DSA_SIG_free(sig->dsa_sig);
-        } else {
-            /* If sig->dsa_sig was constructed,
-             * the memory management of these BNs
-             * are freed with it. */
-            BN_clear_free(sig->r);
-            BN_clear_free(sig->s);
-        }
-        free(pgpsig->data);
-    }
-}
-
-static int pgpVerifySigDSA(pgpDigAlg pgpkey, pgpDigAlg pgpsig,
-                           uint8_t *hash, size_t hashlen, int hash_algo)
-{
-    int rc, ret;
-    struct pgpDigSigDSA_s *sig = pgpsig->data;
-
-    struct pgpDigKeyDSA_s *key = pgpkey->data;
-
-    if (!constructDSASigningKey(key)) {
-        rc = 1;
-        goto done;
-    }
-
-    if (!constructDSASignature(sig)) {
-        rc = 1;
-        goto done;
-    }
-
-    ret = DSA_do_verify(hash, hashlen, sig->dsa_sig, key->dsa_key);
-    if (ret == 1)
-    {
-        /* Success */
-        rc = 0;
-    }
-    else
-    {
-        /* Failure */
-        rc = 1;
-    }
-
-done:
-    return rc;
-}
-
 /****************************** NULL **************************************/
 
 static int pgpSetMpiNULL(pgpDigAlg pgpkey, int num, const uint8_t *p)
@@ -796,11 +481,6 @@ pgpDigAlg pgpPubkeyNew(int algo)
         ka->free = pgpFreeKeyRSA;
         ka->mpis = 2;
         break;
-    case PGPPUBKEYALGO_DSA:
-        ka->setmpi = pgpSetKeyMpiDSA;
-        ka->free = pgpFreeKeyDSA;
-        ka->mpis = 4;
-        break;
     default:
         ka->setmpi = pgpSetMpiNULL;
         ka->mpis = -1;
@@ -823,12 +503,6 @@ pgpDigAlg pgpSignatureNew(int algo)
         sa->verify = pgpVerifySigRSA;
         sa->mpis = 1;
         break;
-    case PGPPUBKEYALGO_DSA:
-        sa->setmpi = pgpSetSigMpiDSA;
-        sa->free = pgpFreeSigDSA;
-        sa->verify = pgpVerifySigDSA;
-        sa->mpis = 2;
-        break;
     default:
         sa->setmpi = pgpSetMpiNULL;
         sa->verify = pgpVerifyNULL;
diff --git a/rpmio/rpmpgp.c b/rpmio/rpmpgp.c
index ad34827..a7e92c5 100644
--- a/rpmio/rpmpgp.c
+++ b/rpmio/rpmpgp.c
@@ -790,9 +790,6 @@ int pgpPubkeyFingerprint(const uint8_t *h, size_t hlen,
 	    case PGPPUBKEYALGO_RSA:
 		mpis = 2;
 		break;
-	    case PGPPUBKEYALGO_DSA:
-		mpis = 4;
-		break;
 	    }
 	}
 
-- 
2.30.2

